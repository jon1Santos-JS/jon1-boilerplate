#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Pasta do template
const templatePath = path.join(__dirname, '..');

// Pasta de destino (pasta onde o comando npx foi executado)
const destinationPath = process.cwd();

// Lista de arquivos a serem excluídos
const excludeFiles = ['.tgz', 'README.md', 'bin', '.gitignore', '.npmignore', '.git', 'node_modules'];

// Função para verificar se um arquivo existe
const fileExists = (filePath) => {
  try {
    fs.accessSync(filePath, fs.constants.F_OK);
    return true;
  } catch (err) {
    return false;
  }
};

// Copiar os arquivos e pastas do template para o destino
const copyTemplate = () => {
  fs.readdirSync(templatePath).forEach(file => {
    const sourceFile = path.join(templatePath, file);
    const destFile = path.join(destinationPath, file);

    // Verificar se o arquivo não está na lista de exclusão
    if (!excludeFiles.includes(file)) {
      if (fs.statSync(sourceFile).isDirectory()) {
        fs.mkdirSync(destFile);
        copyFolderRecursive(sourceFile, destFile);
      } else {
        // Verificar se o arquivo é package.json ou package-lock.json
        if (file === 'package.json' || file === 'package-lock.json') {
          // Verificar se o arquivo já existe na pasta de destino
          if (!fileExists(destFile)) {
            fs.copyFileSync(sourceFile, destFile);
          } else {
            // Adicionar dependências ao arquivo existente
            updateDependencies(destFile, sourceFile);
          }
        } else {
          fs.copyFileSync(sourceFile, destFile);
        }
      }
    }
  });
};

// Função para copiar pastas recursivamente
const copyFolderRecursive = (source, destination) => {
  fs.readdirSync(source).forEach(file => {
    const sourceFile = path.join(source, file);
    const destFile = path.join(destination, file);

    // Verificar se o arquivo não está na lista de exclusão
    if (!excludeFiles.includes(file)) {
      if (fs.statSync(sourceFile).isDirectory()) {
        fs.mkdirSync(destFile);
        copyFolderRecursive(sourceFile, destFile);
      } else {
        // Verificar se o arquivo é package.json ou package-lock.json
        if (file === 'package.json' || file === 'package-lock.json') {
          // Verificar se o arquivo já existe na pasta de destino
          if (!fileExists(destFile)) {
            fs.copyFileSync(sourceFile, destFile);
          } else {
            // Adicionar dependências ao arquivo existente
            updateDependencies(destFile, sourceFile);
          }
        } else {
          fs.copyFileSync(sourceFile, destFile);
        }
      }
    }
  });
};

// Função para adicionar dependências ao arquivo package.json existente
const updateDependencies = (destFile, sourceFile) => {
  const destContent = JSON.parse(fs.readFileSync(destFile, 'utf-8'));
  const sourceContent = JSON.parse(fs.readFileSync(sourceFile, 'utf-8'));

  // Adicionar dependências, devDependencies e peerDependencies
  if (sourceContent.dependencies) {
    destContent.dependencies = { ...destContent.dependencies, ...sourceContent.dependencies };
  }
  if (sourceContent.devDependencies) {
    destContent.devDependencies = { ...destContent.devDependencies, ...sourceContent.devDependencies };
  }
  if (sourceContent.peerDependencies) {
    destContent.peerDependencies = { ...destContent.peerDependencies, ...sourceContent.peerDependencies };
  }

  // Escrever o conteúdo atualizado de volta ao arquivo
  fs.writeFileSync(destFile, JSON.stringify(destContent, null, 2));
};

// Executar a cópia do template
copyTemplate();

console.log('Jon1-boilerplate installed successfully!');

